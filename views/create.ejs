<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Create a Community - Beacon</title>
  <link rel="stylesheet" href="sozdat.css">
</head>
<body>
  <main class="container">
    <h1>Create Your Community</h1>

    <div class="content">
      <div class="form-container">
        <form id="create-form">
          <input type="hidden" name="_csrf" value="<%= csrfToken %>">
          <div class="form-group">
            <label for="name">Community Name</label>
            <input type="text" id="name" name="name" required maxlength="21" pattern="^[a-zA-Z0-9_]{3,21}$">
            <small>Community names must be between 3-21 characters, and can only contain letters, numbers, or underscores.</small>
            <div class="error-message" style="display: none;" data-field="name">
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <circle cx="12" cy="12" r="10"></circle>
                <line x1="12" y1="8" x2="12" y2="12"></line>
                <line x1="12" y1="16" x2="12.01" y2="16"></line>
              </svg>
              <span></span>
            </div>
          </div>

          <div class="form-group">
            <label for="description">Description</label>
            <textarea id="description" name="description" required maxlength="500"></textarea>
            <small><span id="description-char-count">0</span>/500 characters</small>
            <div class="error-message" style="display: none;" data-field="description">
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <circle cx="12" cy="12" r="10"></circle>
                <line x1="12" y1="8" x2="12" y2="12"></line>
                <line x1="12" y1="16" x2="12.01" y2="16"></line>
              </svg>
              <span></span>
            </div>
          </div>

          <div class="form-group">
            <label>Community Color</label>
            <div class="color-picker" id="color"></div>
            <div class="error-message" style="display: none;" data-field="color">
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <circle cx="12" cy="12" r="10"></circle>
                <line x1="12" y1="8" x2="12" y2="12"></line>
                <line x1="12" y1="16" x2="12.01" y2="16"></line>
              </svg>
              <span></span>
            </div>
          </div>

          <div class="form-group">
            <label>Community Icon</label>
            <div class="icon-selector" id="icon"></div>
            <div class="error-message" style="display: none;" data-field="icon">
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <circle cx="12" cy="12" r="10"></circle>
                <line x1="12" y1="8" x2="12" y2="12"></line>
                <line x1="12" y1="16" x2="12.01" y2="16"></line>
              </svg>
              <span></span>
            </div>
          </div>

          <div class="form-group">
            <label for="tags">Tags</label>
            <div class="tags-input" id="tags-input">
              <input type="text" id="tag-input" placeholder="Add a tag and press Enter">
            </div>
            <small>Add up to 5 tags to describe your community</small>
            <div class="error-message" style="display: none;" data-field="tags">
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <circle cx="12" cy="12" r="10"></circle>
                <line x1="12" y1="8" x2="12" y2="12"></line>
                <line x1="12" y1="16" x2="12.01" y2="16"></line>
              </svg>
              <span></span>
            </div>
          </div>

          <button type="submit" class="submit-button">Create Community</button>
        </form>
      </div>

      <div class="preview-container">
        <div class="preview">
          <h2>Preview</h2>
          <div class="preview-header">
            <div class="preview-icon" id="preview-icon"></div>
            <div>
              <div class="preview-name" id="preview-name">Community Name</div>
              <div id="preview-type">Public Community</div>
            </div>
          </div>
          <div class="preview-description" id="preview-description">Community description will appear here.</div>
          <div class="preview-tags" id="preview-tags"></div>
        </div>
      </div>
    </div>
  </main>

  <script>
    function showError(field, message) {
      const errorContainer = document.querySelector(`[data-field="${field}"]`);
      errorContainer.style.display = 'flex';
      errorContainer.querySelector('span').textContent = message;
    }

    function clearAllErrors() {
      document.querySelectorAll('.error-message').forEach(el => {
        el.style.display = 'none';
        el.querySelector('span').textContent = '';
      });
    }

    const colorPicker = document.getElementById('color');
    const colors = "<%= colors %>".split(',');
    let selectedColor = colors[0];

    colors.forEach(color => {
      const colorOption = document.createElement('div');
      colorOption.className = 'color-option';
      colorOption.style.backgroundColor = color;
      colorOption.addEventListener('click', () => {
        document.querySelectorAll('.color-option').forEach(opt => opt.classList.remove('selected'));
        colorOption.classList.add('selected');
        selectedColor = color;
        updatePreview();
      });
      colorPicker.appendChild(colorOption);
    });

    const iconSelector = document.getElementById('icon');
    const icons = "<%= icons %>".split(',');
    let selectedIcon = icons[0];

    icons.forEach(icon => {
      const iconOption = document.createElement('div');
      iconOption.className = 'icon-option';
      iconOption.textContent = icon;
      iconOption.addEventListener('click', () => {
        document.querySelectorAll('.icon-option').forEach(opt => opt.classList.remove('selected'));
        iconOption.classList.add('selected');
        selectedIcon = icon;
        updatePreview();
      });
      iconSelector.appendChild(iconOption);
    });

    const tagsInput = document.getElementById('tags-input');
    const tagInput = document.getElementById('tag-input');
    const tags = new Set();

    tagInput.addEventListener('keydown', (e) => {
      if (e.key === 'Enter' && tagInput.value.trim() !== '' && tags.size < 5) {
        e.preventDefault();
        const tag = tagInput.value.trim();
        if (!tags.has(tag)) {
          tags.add(tag);
          const tagElement = document.createElement('span');
          tagElement.className = 'tag';
          tagElement.innerHTML = `${tag} <span class="tag-remove">Ã—</span>`;
          tagElement.querySelector('.tag-remove').addEventListener('click', () => {
            tags.delete(tag);
            tagElement.remove();
            updatePreview();
          });
          tagsInput.insertBefore(tagElement, tagInput);
          tagInput.value = '';
          updatePreview();
        }
      }
    });

    const descriptionTextarea = document.getElementById('description');
    const descriptionCharCount = document.getElementById('description-char-count');

    descriptionTextarea.addEventListener('input', () => {
      const length = descriptionTextarea.value.length;
      descriptionCharCount.textContent = length;
      updatePreview();
    });

    function updatePreview() {
      const name = document.getElementById('name').value || 'Community Name';
      const description = document.getElementById('description').value || 'Community description will appear here.';

      document.getElementById('preview-name').textContent = name;
      document.getElementById('preview-description').textContent = description;
      document.getElementById('preview-icon').textContent = selectedIcon;
      document.getElementById('preview-icon').style.backgroundColor = selectedColor;

      const previewTags = document.getElementById('preview-tags');
      previewTags.innerHTML = '';
      tags.forEach(tag => {
        const tagElement = document.createElement('span');
        tagElement.className = 'preview-tag';
        tagElement.textContent = tag;
        previewTags.appendChild(tagElement);
      });
    }

    const form = document.getElementById('create-form');
    form.addEventListener('submit', async function (e) {
      e.preventDefault();

      try {
        const formData = new FormData(form);
        formData.append('color', selectedColor);
        formData.append('icon', selectedIcon);
        formData.append('tags', Array.from(tags));
        console.log(formData);
        console.log(Object.fromEntries(formData));
        const response = await fetch('/sozdat', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'CSRF-Token': formData.get('_csrf')
          },
          body: JSON.stringify(Object.fromEntries(formData))
        });

        const data = await response.json();
        clearAllErrors();

        if (!response.ok) {
          if (data.errors) {
            for (const [field, message] of Object.entries(data.errors))
              showError(field, message);
          } else {
            alert(data.error || 'An error occurred while creating the community.');
          }
          return;
        }

      } catch (err) {
        alert('An error occurred while creating the community.');
        return;
      }

      alert('Community created successfully!');
    });

    updatePreview();

    document.querySelectorAll('input, textarea').forEach(input => {
      input.addEventListener('input', updatePreview);
    });
  </script>
</body>
</html>